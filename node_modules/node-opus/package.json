{
  "//": "Platform limitations is due to lack of config.h files. See README.md for more information.",
  "_from": "node-opus@^0.2.7",
  "_id": "node-opus@0.2.9",
  "_inBundle": false,
  "_integrity": "sha512-+IIOdav5D7vHsuLDNk55t17kK2s6c1w4DbfKw8UQxZ635n+AO/SqDE3RpuO3PZKqpWjPtL/chzYZNVxz8/4TUQ==",
  "_location": "/node-opus",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-opus",
    "fetchSpec": "^0.2.7",
    "name": "node-opus",
    "raw": "node-opus@^0.2.7",
    "rawSpec": "^0.2.7",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-opus/-/node-opus-0.2.9.tgz",
  "_shasum": "a9da56c96b6b5f5c32c61ea8a4593bc7295daa11",
  "_spec": "node-opus@^0.2.7",
  "_where": "/home/hstanislas/Other/Bot",
  "author": {
    "email": "jubjub@jubjubnest.net",
    "name": "Mikko Rantanen"
  },
  "bugs": {
    "url": "https://github.com/Rantanen/node-opus/issues"
  },
  "bundleDependencies": false,
  "cpu": [
    "arm",
    "arm64",
    "ia32",
    "x64"
  ],
  "dependencies": {
    "bindings": "~1.2.1",
    "commander": "^2.9.0",
    "nan": "^2.10.0",
    "ogg-packet": "^1.0.0"
  },
  "deprecated": false,
  "description": "NodeJS native binding to OPUS",
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^3.3.0",
    "ogg": "^1.2.5",
    "stream-equal": "^1.0.0"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gypfile": true,
  "homepage": "https://github.com/Rantanen/node-opus",
  "license": "MIT",
  "name": "node-opus",
  "optionalDependencies": {
    "ogg-packet": "^1.0.0"
  },
  "os": [
    "darwin",
    "freebsd",
    "linux",
    "win32"
  ],
  "readme": "node-opus\n=========\n### NodeJS native bindings to libopus\n\nThis module implements bindings for Opus v1.1 for Node.js.\n\n```js\nvar opus = require('node-opus');\n\n// Create the encoder.\n// Specify 48kHz sampling rate and 10ms frame size.\n// NOTE: The decoder must use the same values when decoding the packets.\nvar rate = 48000;\nvar encoder = new opus.OpusEncoder( rate );\n\n// Encode and decode.\nvar frame_size = rate/100;\nvar encoded = encoder.encode( buffer, frame_size );\nvar decoded = encoder.decode( encoded, frame_size );\n\n// or create streams\nvar channels = 2;\nvar opusEncodeStream = new opus.Encoder(rate, channels, frame_size);\nvar opusDecodeStream = new opus.Decoder(rate, channels, frame_size);\n// see examples folder for a more complete example\n```\n\nPlatform support\n----------------\n\nSupported platforms:\n- Linux x64 & ia32\n- Linux ARM (Raspberry Pi 1 & 2)\n- Linux ARM64 (Raspberry Pi 3)\n- Mac OS X x64\n- Windows x64\n\n\nAdd new supported platforms by running ./autogen.sh and ./configure in\ndeps/opus and copying the resulting config.h to deps/config/opus/[os]/[arch].\n\nUse the following flags with configure:\n\n    ./configure --enable-static --disable-shared --with-pic\n\nOn a clean debian-based system, the full flow looks approximately like:\n\n\tsudo apt-get update\n\tsudo apt-get install autoconf\n\tsudo apt-get install libtool\n\tcd deps/opus\n\t./autogen.sh\n\t./configure --enable-static --disable-shared --with-pic\n\tmkdir -p ../config/opus/[os]/[arch]\n\tcp config.h ../config/opus/[os]/[arch]\n\nAnd, then, the last step is to add the OS/Arch to `package.json`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Rantanen/node-opus.git"
  },
  "scripts": {
    "install": "node-gyp rebuild",
    "test": "mocha"
  },
  "version": "0.2.9"
}
